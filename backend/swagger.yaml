openapi: 3.0.0
info:
  title: Task Manager API
  description: API for managing tasks
  version: 1.0.0
servers:
  - url: http://localhost:3000/api
paths:
  /auth/login:
    post:
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: johndoe
                password:
                  type: string
                  example: password123
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR..."
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: "Invalid credentials"
  
  /todos:
    get:
      summary: Get all todos
      parameters:
        - name: search
          in: query
          required: false
          schema:
            type: string
        - name: sortBy
          in: query
          required: false
          schema:
            type: string
            enum: [createdAt, title]
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 5
      responses:
        '200':
          description: A list of todos
          content:
            application/json:
              schema:
                type: object
                properties:
                  todos:
                    type: array
                    items:
                      $ref: '#/components/schemas/Todo'
                  total:
                    type: integer
                  totalPages:
                    type: integer
                  currentPage:
                    type: integer
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: "Session expired. Please sign in again."

    post:
      summary: Create a new todo
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "Buy groceries"
                isCompleted:
                  type: boolean
                  example: false
      responses:
        '201':
          description: Todo created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: "Title is required"

  /todos/{id}:
    put:
      summary: Update a todo
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "Buy groceries"
                isCompleted:
                  type: boolean
                  example: true
      responses:
        '200':
          description: Todo updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
        '404':
          description: Todo not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: "Todo not found"

    delete:
      summary: Delete a todo
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Todo deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: "Todo deleted"
        '404':
          description: Todo not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: "Todo not found"

components:
  schemas:
    Todo:
      type: object
      properties:
        _id:
          type: string
          example: "60f5a4a5a4f5c92d8f92c6ee"
        title:
          type: string
          example: "Buy groceries"
        isCompleted:
          type: boolean
          example: false
        user:
          type: string
          example: "60f5a4a5a4f5c92d8f92c6ee"
        createdAt:
          type: string
          format: date-time
          example: "2021-07-14T20:56:35.800Z"